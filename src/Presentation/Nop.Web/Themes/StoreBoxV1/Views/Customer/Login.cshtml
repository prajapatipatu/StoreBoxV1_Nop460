@model LoginModel
@using Nop.Core
@using Nop.Core.Domain.Customers

@inject IWebHelper webHelper
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.GetCurrentRequestProtocol());
}

<div class="page login-page">
    <div class="page-title-top">
        <div class="container">
            <div class="page-title">
                <h1>@T("Account.Login.Welcome")</h1>
            </div>
        </div>
    </div>

    <div class="page-body">
        <div class="container">
            <div class="container-max">
                @await Html.PartialAsync("_ExternalAuthentication.Errors")
                <div class="customer-blocks">
                    <div class="returning-wrapper fieldset">
                        <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
                            <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                            <div class="title">
                                <strong>@T("SS.Account.Login.Title")</strong>
                            </div>
                            <div class="form-fields">
                                @if (Model.UsernamesEnabled)
                                {
                                    <div class="inputs">
                                        <label asp-for="Username"></label>
                                        <input asp-for="Username" class="username form-control" autofocus="autofocus" />
                                        <span asp-validation-for="Username"></span>
                                    </div>
                                }
                                else
                                {
                                    <div class="inputs">
                                        <label asp-for="Email"></label>
                                        <input asp-for="Email" class="email form-control" autofocus="autofocus" />
                                        <span asp-validation-for="Email"></span>
                                    </div>
                                }
                                <div class="inputs">
                                    <label asp-for="Password"></label>
                                    <input asp-for="Password" class="password form-control" />
                                    <span asp-validation-for="Password"></span>
                                </div>
                                <div class="inputs reversed flex">
                                    <div class="custom-control custom-checkbox">
                                        <input class="custom-control-input" asp-for="RememberMe" />
                                        <label class="custom-control-label" asp-for="RememberMe"></label>
                                    </div>
                                    <span class="forgot-password">
                                        <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                                    </span>
                                </div>
                                @if (Model.DisplayCaptcha)
                                {
                                    <nop-captcha />
                                }
                            </div>
                            <div class="buttons">
                                <button type="submit" class="button-1 login-button btn-block btn btn-primary">@T("Account.Login.LoginButton")</button>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="singup">
                    @{if (Model.RegistrationType == UserRegistrationType.Disabled)
                    { }
                    else if (Model.CheckoutAsGuest)
                    {
                        <div class="text">@T("SS.Account.Need.Title") <a href="@registerUrl">@T("SS.Account.Signup.Title")</a> Or <a href='@Url.RouteUrl("Checkout")'>@T("Account.Login.CheckoutAsGuest")</a></div>
                    }else{
                        <div class="text">@T("SS.Account.Need.Title") <a href="@registerUrl">@T("SS.Account.Signup.Title")</a></div>
                    }
                    }
                </div>
            </div>
            <div class="external-authentication">
                @await Component.InvokeAsync(typeof(ExternalMethodsViewComponent), "ExternalAuthentication")
            </div>
            @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "LoginRegistrationInfo" })
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LoginBottom, additionalData = Model })
        </div>
    </div>
</div>
